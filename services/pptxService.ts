
import type { Slide } from '../types';

// This tells TypeScript that PptxGenJS is a global variable
// provided by the script tag in index.html
declare var PptxGenJS: any;

export const downloadPptx = (slides: Slide[], topic: string) => {
  if (!slides || slides.length === 0) {
    console.error("No slides to generate PPTX for.");
    return;
  }

  const pres = new PptxGenJS();
  
  pres.layout = 'LAYOUT_16x9';

  // Define a master slide for consistent branding (optional but good practice)
  pres.defineSlideMaster({
    title: "MASTER_SLIDE",
    background: { color: "1A202C" }, // dark slate color to match UI
    objects: [
      {
        text: {
          text: "Generated by AI Presentation Maker",
          options: {
            x: 0.5,
            y: "95%",
            w: "90%",
            h: 0.25,
            fontFace: "Arial",
            fontSize: 10,
            color: "A0AEC0",
            align: "center",
          },
        },
      },
    ],
  });


  slides.forEach((slideData, index) => {
    const slide = pres.addSlide({ masterName: "MASTER_SLIDE" });

    // Slide Title
    slide.addText(slideData.title, {
      x: 0.5,
      y: 0.5,
      w: "90%",
      h: 1.0,
      fontSize: 36,
      fontFace: "Helvetica",
      color: "93C5FD", // light blue
      bold: true,
      align: 'left',
    });

    // Slide Content (Bullet points)
    const bulletPoints = slideData.content.map(point => ({ text: point }));
    slide.addText(bulletPoints, {
      x: 0.75,
      y: 1.75,
      w: "85%",
      h: 4.5,
      fontSize: 20,
      fontFace: "Arial",
      color: "E2E8F0", // light gray
      bullet: { type: "bullet" },
      lineSpacing: 36,
    });
    
    // Speaker Notes
    if (slideData.speakerNotes) {
        slide.addNotes(slideData.speakerNotes);
    }
  });

  const fileName = topic.replace(/[^a-z0-9]/gi, '_').toLowerCase() || 'presentation';
  pres.writeFile({ fileName: `${fileName}.pptx` });
};
